	MOV	R0,#NPULSE
	MOV	A,@R0
	MOV	ATTEMP,A	;Number attempt
PRGNEXT:
	CALL	DPRG
;
	DJNZ	ATTEMP,PRGIA	;Number attempt = X?
	CALL	VREADPB		;Read programming byte & Verify with
				;original byte (Verify regime)
	CALL	COMP
	JNZ	ERRPB		;Not compare. Device failed
	JMP	PRG4X
;
PRGIA:
	CALL	VREADPB		;Read programming byte & Verify with
				;original byte (Verify regime)
	CALL	COMP
	JNZ	PRGNEXT		;Not compare. Repeat programming
PRG4X:
;---
	MOV	R0,#OPULSE
	MOV	R1,#DELC
	CALL	SETP
	
	MOV	R0,#NPULSE
	MOV	A,ATTEMP
	CPL	A
	INC	A
	ADD	A,@R0	
	MOV	R0,#DELC
;
	CALL	MUL
	CALL	PRGIMP
;	
PRGBEND:CLR	C	
	RET
ERRPB:
	CLR	C
	CPL	C
	RET
;
;--- Programm with delay IPULE
;
DPRG:
	MOV	R0,#IPULSE
	MOV	R1,#DELC
	CALL	SETP
	JMP	PRGIMP
;
;----------------------------
;--- Programm byte FOR:
;			8755
;----------------------------
;
M8755:
	MOV	ATTEMP,#25	;Number PRG pulse = 25
;
	ANL	P2,#CS0
	MOV	A,#ROMA0
	ORLD	P6,A
	ORL	P2,#(NOT CS0)
;
M55AG:
;	DELAYS	10		;1mS PRG Pulse
	MOV	R0,#DELC
	MOV	@R0,#(LOW 10)
	INC	R0
	MOV	@R0,#(HIGH 10)
	CALL	PRGIMP
	MOV	R0,#DELC
;	DELAYS	10		;1mS Pulse After PRG pulse
	MOV	R0,#DELC
	MOV	@R0,#(LOW 10)
	INC	R0
	MOV	@R0,#(HIGH 10)
	CALL	DELAYM1
;
	DEC	ATTEMP
	MOV	A,ATTEMP
	JNZ	M55AG
;
 	ANL	P2,#CS0
	MOV	A,#(NOT ROMA0)
	ANLD	P6,A
	ORL	P2,#(NOT CS0)
;
	CALL	VREADPB
	CALL	COMP
;
	JNZ	ERRPB1
	CLR	C
	RET
;
ERRPB1:
	CLR	C
	CPL	C
	RET
;
;---
;
	ORG	0C00H
;
;---
;
;--- MULTIPLY OPERATIONS
;
;	A*@R0
;
MUL:
	MOV	TMPRA,#00
	MOV	COUNT,#8
MPY8LP:
	JB0	MPY8A
	XCH	A,TMPRA
	CLR	C
	RRC	A
	XCH	A,TMPRA
	RRC	A
	DJNZ	COUNT,MPY8LP
;
MULE:	MOV	@R0,A
	INC	R0
	MOV	A,TMPRA
	MOV	@R0,A
	RET
;
MPY8A:
	XCH	A,TMPRA
	ADD	A,@R0
	RRC	A
	XCH	A,TMPRA
	RRC	A
	DJNZ	COUNT,MPY8LP
	JMP	MULE
;
;--- Compare original byte whis byte in programming chip
;
COMP:
;
	MOV	R0,#BYTEO
	MOV	R1,#BYTEP
;
	MOV	A,@R1		;Address PRG byte
	CPL	A		;
	INC	A
	ADD	A,@R0		;Compare original & PRG byte
	RET
;
;--- Read byte
;
INBYTE:
	MOV	R0,A
	ANL	P2,#CS0
	MOVD	A,P5
	ANL	A,#00001111B
	SWAP	A
	MOV	@R0,A
	MOVD	A,P4
	ANL	A,#00001111B
	ORL	A,@R0
	MOV	@R0,A
	ORL	P2,#(NOT CS0)
	RET
;
;---
;
	ORG	0D00H
;
;--- Read byte with programming chip (in verify mode)
;
VREADPB:
	MOV	R0,#GRP1		;Addr CHIP regime
	MOV	A,@R0			;CHIP ?
	ADD	A,#-(LOW TGRP1)		
	ADD	A,#(LOW VERJMP)
	JMPP	@A
;
;--- TABLE JMP FOR SUBROUTINES PRG
;
VERJMP:
	DB	(LOW VV2716)
	DB	(LOW VV2732)
	DB	(LOW VV2764)
	DB	(LOW VV27128)
	DB	(LOW VV27256)
	DB	(LOW VV27512)
	DB	(LOW VV8048)
	DB	(LOW VV8051)
	DB	(LOW VV8755)
	DB	(LOW VV27C64)
	DB	(LOW VV27C128)
	DB	(LOW VV27C256)
	DB	(LOW VV27C512)
	DB	(LOW VV27I16)
;
VV27I16:
VV2716:	JMP	V2716
;
VV2732:	
	JMP	V2732
VV27512:
VV27C512:
	JMP	V27512
;
VV2764:	
VV27128:
	JMP	V27C64
VV27256:
VV27C256: 
	JMP	VALLB
;
VV27C64:  JMP	V27C64  
VV27C128: JMP	V27C128
;
VV8048:	JMP	V8048
VV8051:
VV8755:	JMP	V8755
;
;
;--- Verify byte at 8048 CHIP
;
V8048:
	ANL	P2,#CS2
	MOV	A,#00000111B
	ANLD	P7,A
	ORL	P2,#(NOT CS2)
;
	MOV	A,#BYTEP
	CALL	INBYTE
;
	ANL	P2,#CS2
	MOV	A,#00001000B
	ORLD	P7,A
	ORL	P2,#(NOT CS2)
;
	RET
;
;--- Verify byte at 8755 CHIP
;
V8755:
	SEL	MB0
	CALL	SETA55
	SEL	MB1
READP55:
	ANL	P2,#CS2
	MOV	A,#(NOT ADDREN)
	ANLD	P7,A
	ORL	P2,#NOT CS2
;
	ANL	P1,#CSPRG
;
	MOV	A,#BYTEP
	CALL	INBYTE
;
	ORL	P1,#(NOT CSPRG)
;
	RET

V2716:
	ANL	P1,#CSPRG
	CALL	VALLB
	JMP	OEENOFF
V2732:
	ANL	P1,#CSPRG
	CALL	VALLB
	ORL	P1,#NOT CSPRG
	RET
V27C64:
	ANL	P1,#CSPRG
	CALL	VALLB
	CALL	OEENOFF
	RET
V27C128:
	CALL	VALLB
	CALL	OEENOFF
	ORL	P1,#NOT CSPRG
	RET
V27512:
	ANL	P1,#CSPRG
	CALL	VALLB
	CALL	OEENOFF
	ORL	P1,#NOT CSPRG
	RET
;
VALLB:
	MOV	R0,#BYTEO
	MOV	A,@R0
	CPL	A		;Set invers byte by programming chip DATA BUS
	CALL	O1T0P4
	SWAP	A
	CALL	O1T0P5
;
	ANL	P2,#CS2		;OR TXBIT !!!
;	CLR	A		;VPP Desable, OE Enable
	MOV	A,#NOT OEEN
	ANLD	P6,A
;	
	ORL	P2,#(NOT CS2)
	MOV	A,#BYTEP
	JMP	INBYTE
;
;---
;
OEENOFF:
	ANL	P2,#CS2
	MOV	A,#OEEN
	ORLD	P6,A
	ORL	P2,#NOT CS2
	RET
;
;--- Read byte with programming chip
;
READPB:
	MOV	R0,#GRP1		;Addr CHIP regime
	MOV	A,@R0			;CHIP ?
	ADD	A,#-(LOW TGRP1)		
	ADD	A,#(LOW RDJMP)
	JMPP	@A
;
;--- TABLE JMP FOR SUBROUTINES PRG
;
RDJMP:
	DB	(LOW RR2716)
	DB	(LOW RR2732)
	DB	(LOW RR2764)
	DB	(LOW RR27128)
	DB	(LOW RR27256)
	DB	(LOW RR27512)
	DB	(LOW RR8048)
	DB	(LOW RR8051)
	DB	(LOW RR8755)
	DB	(LOW RR27C64)
	DB	(LOW RR27C128)
	DB	(LOW RR27C256)
	DB	(LOW RR27C512)
	DB	(LOW RR27I16)
;
RR27I16:
RR2716:	
RR2732:	
RR2764:	
RR27128:
RR27256:
RR27512:
RR27C64:  
RR27C128: 
RR27C256: 
RR27C512:JMP	V2716
;
RR8048:	JMP	V8048
RR8051:
RR8755:	JMP	V8755
;
;---
;
;	
;----------------------------
;--- TEST SUBROUTINES
;----------------------------
;
;--- TABLE JMP FOR SUBROUTINES PRG
;
TESTJMP:
	DB	(LOW TESTVPP)
	DB	(LOW TESTVCC)

RUNTEST:
	MOV	R0,#DATA+2	;Test revime
	MOV	A,@R0
	ADD	A,#(LOW TESTJMP)
	JMPP	@A
;
;----------------------------
;--- TEST VPP
;----------------------------
;
TESTVPP:
	MOV	R0,#DATA+4
	MOV	A,@R0
TEST4R:	CALL	O1T2P4
	MOV	A,#VPPEN
	CALL	O1T2P5
	MOV	A,#ROMA15
	CALL	O1T1P6
	MOV	A,#A15VPP
	CALL	O1T2P6
	RET
;
;----------------------------
;--- TEST VCC
;----------------------------
;
TESTVCC:
	MOV	R0,#DATA+4
	MOV	A,@R0
	CALL	O1T2P5
	RET
;
;----------------------------
;--- Load start address for ROM (=0000)
;----------------------------
;
LSTRTA:
	MOV	R0,#ADDR	;LOW  Address work registry for PRG ADDR
	MOV	@R0,#0H		;SET LOW  start ADDR to 0
	INC	R0		;HIGH Address work registry for PRG ADDR
	MOV	@R0,#0H		;SET HIGH start ADDR to 0
       	RET
;
;---
;
DEBUG:
;!!!_start
	STOP	TCNT
	DIS	TCNTI
;
TES1:	MOV	A,#0
	CALL	O1T1P7
	CALL	DD
	CALL	DD
	CALL	DD
	MOV	A,#0FFH
	CALL	O1T1P7
	CALL	DD
	CALL	DD
	CALL	DD
	CALL	DD
	CALL	DD
	CALL	DD
;	RET
	JMP	TES1
;
;---
;
	ORG	0E00H
;
;---
;
;
;---
;
ONVCC:
	MOV	R0,#GRP1		;Addr CHIP regime
	MOV	A,@R0			;CHIP ?
	ADD	A,#-(LOW TGRP1)		
	ADD	A,#(LOW CJMP)

	JMPP	@A
;
;--- TABLE JMP FOR SET VCC
;
CJMP:		;SET VCC FOR :
;
	DB	(LOW CC2716)	;2716
	DB	(LOW CC2716)	;2732
	DB	(LOW CCALL)	;2764
	DB	(LOW CCALL)	;27128
	DB	(LOW CCALL)	;27256
	DB	(LOW CCALL)	;27512
	DB	(LOW CCNO)	;8048
	DB	(LOW CCNO)	;8051
	DB	(LOW CC8755)	;8755
	DB	(LOW CCALL)	;27C64
	DB	(LOW CCALL)	;27C128
	DB	(LOW CCALL)	;27C256
	DB	(LOW CCALL)	;27C512
	DB	(LOW CC2716)	;2716 /Intelligent algorithm/
;
;---
;
CC2716:	JMP	C2716
CCALL:	JMP	VCCALL
CCNO:	RET
;
CC8755:
	CALL	VCCALL
	MOV	A,#ROMA1
	CALL	O1T0P6
	MOV	A,#ROMA7
	CALL	O1T1P4
	ORL	P1,#NOT CSPRG
	RET
;
C2716:
	MOV	A,#ROMA11
	CALL	O1T1P5
;
VCCALL:	
	MOV	A,#VCC5V
	CALL	O1T2P5
	MOV	A,#(VCC5V OR VCCEN)
	CALL	O1T2P5
;	
	MOV	R0,#GRP1
	MOV	A,@R0
	ADD	A,#-(LOW TGRP1)
	CLR	C
	RLC	A		;*2
	ADD	A,#(LOW PS2716)
	MOVP	A,@A
	MOV	R1,#ROMS	;roms:	HIGHT 4 bits - 2p6
	MOV	@R1,A
	SWAP	A
	CALL	O1T2P6
 	SWAP	A
	XRL	A,#ROMA13
	CALL	O1T1P6
;
	ORL	P1,#(V5ORIG OR TXBIT)	;SET POWER FOR ORIGINAL CHIP
	ORL	P2,#(NOT CSORIG)	;Desable CS for original chip
	ORL	P1,#(V5ORIG OR OEORIG OR TXBIT)	;Desable OE for original chip
;
	RET
;
;---
;
ONVPP:
	MOV	R0,#GRP1		;Addr CHIP regime
	MOV	A,@R0			;CHIP ?
	ADD	A,#-(LOW TGRP1)		
	ADD	A,#(LOW PJMP)

	JMPP	@A
;
;--- TABLE JMP FOR SET VPP
;
PJMP:		;SET VPP FOR :
;
	DB	(LOW PPALL)	;2716
	DB	(LOW PPALL)	;2732
	DB	(LOW PPALL)	;2764
	DB	(LOW PPALL)	;27128
	DB	(LOW PPALL)	;27256
	DB	(LOW PPALL)	;27512
	DB	(LOW PPNO)	;8048
	DB	(LOW PPNO)	;8051
	DB	(LOW PP8755)	;8755
	DB	(LOW PPALL)	;27C64
	DB	(LOW PPALL)	;27C128
	DB	(LOW PPALL)	;27C256
	DB	(LOW PPALL)	;27C512
	DB	(LOW PPALL)	;2716 /Intelligent algorithm/
;
;---
;
PPNO:	RET
PPALL:
	CALL	SETVPP
;
	MOV	R0,#GRP1
	MOV	A,@R0
	ADD	A,#-(LOW TGRP1)
	CLR	C
	RLC	A		;*2
	ADD	A,#(LOW PS2716)
	INC	A
	MOVP	A,@A
;
	JB0	PPALLC
	ANL	P1,#CSPRG
	JMP	PPALLA
PPALLC:
	ORL	P1,#NOT CSPRG
PPALLA:
	MOV	R0,#ALGOR
	MOV	A,@R0
	SWAP	A
	JMP	O1T2P5
;
;---
;
PP8755:
;	CALL	ONPVCC
;
	MOV	A,#(ROMA1 OR ROMA3)
	CALL	O1T0P6			;CLK (3p) -> "0"
					;RESET (4p) -> "0"
					;CE2 (2p) -> "1"
	ANL	P1,#NOT OSCEN		;CLK disable
	MOV	A,#(ROMA14 OR ROMA15)	;ALE (11p) -> "1"
	CALL	O1T1P6			;VPP -> +5V
;
	MOV	A,#00001000B	;IOR,IOW (8p,10p) -> "1"
	CALL	O1T1P4
	ORL	P1,#(NOT CSPRG)	;RD (9p) -> "1"
	MOV	A,#(NOT ROMA12)	;IO/M (7p) -> "0"
	CALL	O1T1P6	
;
	CALL	SETVPP
	MOV	A,#(VPPEN OR VCC5V OR VCCEN)
	CALL	O1T2P5
;
	MOV	A,#ROMA1
	CALL	O1T0P6			;CLK (3p) -> "0"
;
	RET
;
;---
;
PP8048:
;	CALL	ONPVCC
;
	MOV	A,#0
	CALL	O1T0P6
	ANL	P1,#NOT OSCEN	;CLK Enable
;
	MOV	A,#OEEN		;PROG	-> +5V
	CALL	O1T2P6
	MOV	A,#00000000B	;RESET 	->  0V (CLK Enable)
	CALL	O1T0P6		;TO 	->  0V
	MOV	A,#00001000B	;VDD 	-> +5V
	CALL	O1T1P5
	MOV	A,#00000001B	;EA	-> +5V
	CALL	O1T1P4	
	MOV	A,#ROMA12 	;EA	-> +25V
	CALL	O1T1P6
;
	CALL	SETVPP
	MOV	A,#(VPPEN OR VCC5V OR VCCEN)
	CALL	O1T2P5
	RET
;
;--- SET VPP
;
SETVPP:	MOV	R0,#GRP0
	MOV	A,@R0
	MOVP3	A,@A
	SWAP	A
	JMP	O1T2P4	
;
;---
;
PS2716:	
	DB	((OEEN + A11VPP) SHL 4) + (ROMA12 + ROMA13)
	DB	((VPPEN + VCC5V + VCCEN) SHL 4) + 0
;PS2732:
	DB	ROMA13
	DB	((VPPEN + VCC5V + VCCEN) SHL 4) + 1
;PS2764:
	DB	((OEEN + A15VPP) SHL 4) + (ROMA13 OR ROMA14 OR ROMA15)
	DB	((VPPEN + VCC6V + VCCEN) SHL 4) + 1
;PS27128:
	DB	((OEEN + A15VPP) SHL 4) + (ROMA14 + ROMA15)
	DB	((VPPEN + VCC6V + VCCEN) SHL 4) + 1
;PS27256:
	DB	((OEEN + A15VPP) SHL 4) + ROMA15
	DB	((VPPEN + VCC6V + VCCEN) SHL 4) + 1
;PS27512:
	DB	0
	DB	((VPPEN + VCC6V + VCCEN) SHL 4) + 1
;PS8048:
	DB	0
	DB	0
;PS8051:
	DB	0
	DB	0
;PS8755:
	DB	ROMA15
	DB	((VPPEN + VCC5V + VCCEN) SHL 4) + 1
;PS27C64:
	DB	((OEEN + A15VPP) SHL 4) + (ROMA13 OR ROMA14 OR ROMA15)
	DB	((VPPEN + VCC65V + VCCEN) SHL 4) + 1
;PS27C128:
	DB	((OEEN + A15VPP) SHL 4) + (ROMA14 + ROMA15)
	DB	((VPPEN + VCC65V + VCCEN) SHL 4) + 1
;PS27C256:
	DB	((OEEN + A15VPP) SHL 4) + ROMA15
	DB	((VPPEN + VCC65V + VCCEN) SHL 4) + 1
;PS27C512:
	DB	0
	DB	((VPPEN + VCC65V + VCCEN) SHL 4) + 1
;PS27I16:
	DB	((OEEN + A11VPP) SHL 4) + (ROMA12 + ROMA13)
	DB	((VPPEN + VCC5V + VCCEN) SHL 4) + 0
	
	

;!!!_end
;
;--- END OF PROGRAMM BANK1
;
	END
;
